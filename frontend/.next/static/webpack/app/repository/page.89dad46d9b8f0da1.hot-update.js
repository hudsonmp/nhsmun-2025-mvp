"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/repository/page",{

/***/ "(app-pages-browser)/./lib/googleDrive.ts":
/*!****************************!*\
  !*** ./lib/googleDrive.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkGoogleDriveConfig: function() { return /* binding */ checkGoogleDriveConfig; },\n/* harmony export */   downloadDriveFile: function() { return /* binding */ downloadDriveFile; },\n/* harmony export */   getDriveFile: function() { return /* binding */ getDriveFile; },\n/* harmony export */   isGoogleAuthenticated: function() { return /* binding */ isGoogleAuthenticated; },\n/* harmony export */   listDriveFiles: function() { return /* binding */ listDriveFiles; },\n/* harmony export */   loadGoogleApi: function() { return /* binding */ loadGoogleApi; },\n/* harmony export */   signInWithGoogle: function() { return /* binding */ signInWithGoogle; },\n/* harmony export */   signOutFromGoogle: function() { return /* binding */ signOutFromGoogle; }\n/* harmony export */ });\n// This is a simplified module for Google Drive integration\n// Type definitions for gapi and global window object\n// Load the Google API client library\nconst loadGoogleApi = ()=>{\n    return new Promise((resolve, reject)=>{\n        // Check if the API is already loaded\n        if (window.gapi && window.gapi.client && window.gapi.client.drive) {\n            console.log(\"Google API already loaded\");\n            resolve();\n            return;\n        }\n        const script = document.createElement(\"script\");\n        script.src = \"https://apis.google.com/js/api.js\";\n        script.onload = ()=>{\n            console.log(\"Google API script loaded\");\n            window.gapi.load(\"client:auth2\", ()=>{\n                console.log(\"Google client and auth2 libraries loaded\");\n                // Initialize the client with your credentials\n                window.gapi.client.init({\n                    apiKey: \"AIzaSyB-pZ0FV758VUs_pIZ0Ck2iq5Wx0FDJCxw\",\n                    clientId: \"913358736520-5biusol4f5ead6t86d7rv94rd0ar3gkn.apps.googleusercontent.com\",\n                    discoveryDocs: [\n                        \"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"\n                    ],\n                    scope: \"https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly\"\n                }).then(()=>{\n                    console.log(\"Google API client initialized successfully\");\n                    resolve();\n                }).catch((error)=>{\n                    console.error(\"Error initializing Google API client:\", {\n                        message: error.message,\n                        details: error,\n                        apiKey:  true ? \"Provided\" : 0,\n                        clientId:  true ? \"Provided\" : 0\n                    });\n                    reject(new Error(\"Failed to initialize Google API client: \".concat(error.message || \"Unknown error\")));\n                });\n            });\n        };\n        script.onerror = (error)=>{\n            console.error(\"Error loading Google API script:\", error);\n            reject(new Error(\"Failed to load Google API script\"));\n        };\n        document.body.appendChild(script);\n    });\n};\n// Check if user is authenticated with Google\nconst isGoogleAuthenticated = ()=>{\n    if (!window.gapi || !window.gapi.auth2) {\n        return false;\n    }\n    const authInstance = window.gapi.auth2.getAuthInstance();\n    return authInstance.isSignedIn.get();\n};\n// Sign in with Google\nconst signInWithGoogle = async ()=>{\n    if (!window.gapi || !window.gapi.auth2) {\n        throw new Error(\"Google API not loaded\");\n    }\n    const authInstance = window.gapi.auth2.getAuthInstance();\n    return await authInstance.signIn();\n};\n// Sign out from Google\nconst signOutFromGoogle = async ()=>{\n    if (!window.gapi || !window.gapi.auth2) {\n        throw new Error(\"Google API not loaded\");\n    }\n    const authInstance = window.gapi.auth2.getAuthInstance();\n    return await authInstance.signOut();\n};\n// List Google Drive files\nconst listDriveFiles = async function() {\n    let query = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n    return new Promise((resolve, reject)=>{\n        try {\n            // Check if Google API is properly loaded\n            if (!window.gapi || !window.gapi.client || !window.gapi.client.drive) {\n                throw new Error(\"Google Drive API not properly initialized\");\n            }\n            window.gapi.client.drive.files.list({\n                pageSize: 30,\n                fields: \"files(id, name, mimeType, modifiedTime)\",\n                q: query ? \"name contains '\".concat(query, \"' and trashed = false\") : \"trashed = false\",\n                orderBy: \"modifiedTime desc\"\n            }).then((response)=>{\n                resolve(response.result.files);\n            }).catch((error)=>{\n                console.error(\"Google Drive API error details:\", {\n                    message: error.message,\n                    status: error.status,\n                    result: error.result,\n                    stack: error.stack\n                });\n                reject(new Error(\"Google Drive API error: \".concat(error.message || \"Unknown error\")));\n            });\n        } catch (error) {\n            console.error(\"Google Drive operation error:\", error);\n            reject(new Error(\"Failed to list Google Drive files: \".concat(error.message || \"Unknown error\")));\n        }\n    });\n};\n// Get a Google Drive file\nconst getDriveFile = async (fileId)=>{\n    return new Promise((resolve, reject)=>{\n        window.gapi.client.drive.files.get({\n            fileId: fileId,\n            fields: \"id, name, mimeType, modifiedTime, webContentLink\"\n        }).then((response)=>{\n            resolve(response.result);\n        }).catch((error)=>{\n            reject(error);\n        });\n    });\n};\n// Download a Google Drive file\nconst downloadDriveFile = async (fileId)=>{\n    const response = await fetch(\"https://www.googleapis.com/drive/v3/files/\".concat(fileId, \"?alt=media\"), {\n        headers: {\n            Authorization: \"Bearer \".concat(window.gapi.auth.getToken().access_token)\n        }\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to download file\");\n    }\n    return await response.blob();\n};\n// Diagnostic function to check Google Drive API configuration\nconst checkGoogleDriveConfig = async ()=>{\n    const diagnostics = {\n        configStatus: {},\n        apiStatus: {},\n        errors: []\n    };\n    // Check environment variables\n    diagnostics.configStatus.apiKeyProvided = !!\"AIzaSyB-pZ0FV758VUs_pIZ0Ck2iq5Wx0FDJCxw\";\n    diagnostics.configStatus.clientIdProvided = !!\"913358736520-5biusol4f5ead6t86d7rv94rd0ar3gkn.apps.googleusercontent.com\";\n    if (!diagnostics.configStatus.apiKeyProvided) {\n        diagnostics.errors.push(\"Google API Key is missing in environment variables\");\n    }\n    if (!diagnostics.configStatus.clientIdProvided) {\n        diagnostics.errors.push(\"Google Client ID is missing in environment variables\");\n    }\n    // Check if API is loaded\n    try {\n        diagnostics.apiStatus.gapiLoaded = !!window.gapi;\n        diagnostics.apiStatus.clientLoaded = !!(window.gapi && window.gapi.client);\n        diagnostics.apiStatus.authLoaded = !!(window.gapi && window.gapi.auth2);\n        diagnostics.apiStatus.driveLoaded = !!(window.gapi && window.gapi.client && window.gapi.client.drive);\n        // Check authentication status\n        if (diagnostics.apiStatus.authLoaded) {\n            const authInstance = window.gapi.auth2.getAuthInstance();\n            diagnostics.apiStatus.isSignedIn = authInstance.isSignedIn.get();\n            if (diagnostics.apiStatus.isSignedIn) {\n                const user = authInstance.currentUser.get();\n                const profile = user.getBasicProfile();\n                diagnostics.apiStatus.user = {\n                    id: profile.getId(),\n                    name: profile.getName(),\n                    email: profile.getEmail()\n                };\n                // Check if user has necessary scopes\n                const scopes = user.getGrantedScopes();\n                diagnostics.apiStatus.hasFileScope = scopes.includes(\"https://www.googleapis.com/auth/drive.file\");\n                diagnostics.apiStatus.hasReadScope = scopes.includes(\"https://www.googleapis.com/auth/drive.readonly\");\n                if (!diagnostics.apiStatus.hasFileScope || !diagnostics.apiStatus.hasReadScope) {\n                    diagnostics.errors.push(\"Missing required Google Drive scopes. Please disconnect and reconnect\");\n                }\n            } else {\n                diagnostics.errors.push(\"User is not signed in to Google\");\n            }\n        } else {\n            diagnostics.errors.push(\"Google Auth API not loaded\");\n        }\n        if (!diagnostics.apiStatus.driveLoaded) {\n            diagnostics.errors.push(\"Google Drive API not loaded\");\n        }\n    } catch (error) {\n        diagnostics.errors.push(\"Error checking API status: \".concat(error.message));\n    }\n    console.log(\"Google Drive API Diagnostics:\", diagnostics);\n    return diagnostics;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/googleDrive.ts\n"));

/***/ })

});