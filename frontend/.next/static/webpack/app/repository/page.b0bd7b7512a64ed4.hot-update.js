"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/repository/page",{

/***/ "(app-pages-browser)/./lib/googleDrive.ts":
/*!****************************!*\
  !*** ./lib/googleDrive.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkGoogleDriveConfig: function() { return /* binding */ checkGoogleDriveConfig; },\n/* harmony export */   downloadDriveFile: function() { return /* binding */ downloadDriveFile; },\n/* harmony export */   getDriveFile: function() { return /* binding */ getDriveFile; },\n/* harmony export */   isGoogleAuthenticated: function() { return /* binding */ isGoogleAuthenticated; },\n/* harmony export */   listDriveFiles: function() { return /* binding */ listDriveFiles; },\n/* harmony export */   loadGoogleApi: function() { return /* binding */ loadGoogleApi; },\n/* harmony export */   signInWithGoogle: function() { return /* binding */ signInWithGoogle; },\n/* harmony export */   signOutFromGoogle: function() { return /* binding */ signOutFromGoogle; }\n/* harmony export */ });\n// This is a simplified module for Google Drive integration\n// Type definitions for gapi and global window object\n// Check if we're running in a browser environment\nconst isBrowser = \"object\" !== \"undefined\";\n// Load the Google API client library\nconst loadGoogleApi = (useManualCredentials)=>{\n    return new Promise((resolve, reject)=>{\n        // Check if we're in a browser environment\n        if (!isBrowser) {\n            console.warn(\"Google API cannot be loaded in a non-browser environment\");\n            reject(new Error(\"Google API requires a browser environment\"));\n            return;\n        }\n        // Check if the API is already loaded\n        if (window.gapi && window.gapi.client && window.gapi.client.drive) {\n            console.log(\"Google API already loaded\");\n            resolve();\n            return;\n        }\n        // Define a global callback that will be called when the script loads\n        const callbackName = \"googleApiLoaded_\" + Math.random().toString(36).substring(2, 15);\n        window[callbackName] = ()=>{\n            console.log(\"Google API script loaded via callback\");\n            initializeGoogleClient(useManualCredentials, resolve, reject);\n        };\n        const script = document.createElement(\"script\");\n        script.src = \"https://apis.google.com/js/api.js?onload=\".concat(callbackName);\n        script.async = true;\n        script.defer = true;\n        script.onload = ()=>{\n            console.log(\"Google API script onload event triggered\");\n        // The callback will handle initialization\n        };\n        script.onerror = (error)=>{\n            console.error(\"Error loading Google API script:\", error);\n            reject(new Error(\"Failed to load Google API script\"));\n        };\n        document.body.appendChild(script);\n    });\n};\n// Helper function to initialize the Google client\nconst initializeGoogleClient = (useManualCredentials, resolve, reject)=>{\n    if (!window.gapi) {\n        const error = new Error(\"Google API (gapi) not available after loading\");\n        console.error(error);\n        reject === null || reject === void 0 ? void 0 : reject(error);\n        return;\n    }\n    window.gapi.load(\"client:auth2\", async ()=>{\n        console.log(\"Google client and auth2 libraries loaded\");\n        try {\n            // Get API key and client ID\n            let apiKey = \"AIzaSyB-pZ0FV758VUs_pIZ0Ck2iq5Wx0FDJCxw\";\n            let clientId = \"913358736520-5biusol4f5ead6t86d7rv94rd0ar3gkn.apps.googleusercontent.com\";\n            // If using manual credentials, try to get them from session storage\n            if (useManualCredentials) {\n                const manualApiKey = sessionStorage.getItem(\"MANUAL_GOOGLE_API_KEY\");\n                const manualClientId = sessionStorage.getItem(\"MANUAL_GOOGLE_CLIENT_ID\");\n                if (manualApiKey && manualClientId) {\n                    apiKey = manualApiKey;\n                    clientId = manualClientId;\n                    console.log(\"Using manually provided Google API credentials\");\n                }\n            }\n            console.log(\"Google Drive API Configuration:\", {\n                apiKeyAvailable: !!apiKey,\n                clientIdAvailable: !!clientId\n            });\n            if (!apiKey || !clientId) {\n                const error = new Error(\"Google Drive API keys not configured\");\n                console.error(error);\n                reject === null || reject === void 0 ? void 0 : reject(error);\n                return;\n            }\n            try {\n                // Initialize the client with your credentials\n                await window.gapi.client.init({\n                    apiKey: apiKey,\n                    clientId: clientId,\n                    discoveryDocs: [\n                        \"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"\n                    ],\n                    scope: \"https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly\"\n                });\n                console.log(\"Google API client initialized successfully\");\n                resolve === null || resolve === void 0 ? void 0 : resolve();\n            } catch (error) {\n                console.error(\"Error initializing Google API client:\", {\n                    message: error.message,\n                    details: error,\n                    apiKey: apiKey ? \"Provided\" : \"Missing\",\n                    clientId: clientId ? \"Provided\" : \"Missing\"\n                });\n                reject === null || reject === void 0 ? void 0 : reject(new Error(\"Failed to initialize Google API client: \".concat(error.message || \"Unknown error\")));\n            }\n        } catch (error) {\n            console.error(\"Error in client:auth2 callback:\", error);\n            reject === null || reject === void 0 ? void 0 : reject(new Error(\"Error in Google API initialization: \".concat(error.message || \"Unknown error\")));\n        }\n    });\n};\n// Check if user is authenticated with Google\nconst isGoogleAuthenticated = ()=>{\n    // Check if we're in a browser environment\n    if (!isBrowser) {\n        console.warn(\"Google authentication check requires a browser environment\");\n        return false;\n    }\n    if (!window.gapi || !window.gapi.auth2) {\n        console.warn(\"Google API or auth2 not loaded\");\n        return false;\n    }\n    try {\n        const authInstance = window.gapi.auth2.getAuthInstance();\n        if (!authInstance) {\n            console.warn(\"Google Auth instance not available\");\n            return false;\n        }\n        const isSignedIn = authInstance.isSignedIn.get();\n        console.log(\"Google authentication status:\", isSignedIn ? \"Authenticated\" : \"Not authenticated\");\n        return isSignedIn;\n    } catch (error) {\n        console.error(\"Error checking Google authentication:\", error);\n        return false;\n    }\n};\n// Sign in with Google\nconst signInWithGoogle = async ()=>{\n    // Check if we're in a browser environment\n    if (!isBrowser) {\n        throw new Error(\"Google sign-in requires a browser environment\");\n    }\n    if (!window.gapi || !window.gapi.auth2) {\n        throw new Error(\"Google API not loaded\");\n    }\n    try {\n        const authInstance = window.gapi.auth2.getAuthInstance();\n        if (!authInstance) {\n            throw new Error(\"Google Auth instance not available\");\n        }\n        return await authInstance.signIn();\n    } catch (error) {\n        console.error(\"Error signing in with Google:\", error);\n        throw new Error(\"Google sign-in failed: \".concat(error.message || \"Unknown error\"));\n    }\n};\n// Sign out from Google\nconst signOutFromGoogle = async ()=>{\n    // Check if we're in a browser environment\n    if (!isBrowser) {\n        throw new Error(\"Google sign-out requires a browser environment\");\n    }\n    if (!window.gapi || !window.gapi.auth2) {\n        throw new Error(\"Google API not loaded\");\n    }\n    try {\n        const authInstance = window.gapi.auth2.getAuthInstance();\n        if (!authInstance) {\n            throw new Error(\"Google Auth instance not available\");\n        }\n        return await authInstance.signOut();\n    } catch (error) {\n        console.error(\"Error signing out from Google:\", error);\n        throw new Error(\"Google sign-out failed: \".concat(error.message || \"Unknown error\"));\n    }\n};\n// List Google Drive files\nconst listDriveFiles = async function() {\n    let query = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n    return new Promise((resolve, reject)=>{\n        try {\n            // Check if we're in a browser environment\n            if (!isBrowser) {\n                throw new Error(\"Google Drive API requires a browser environment\");\n            }\n            // Check if Google API is properly loaded\n            if (!window.gapi || !window.gapi.client || !window.gapi.client.drive) {\n                throw new Error(\"Google Drive API not loaded\");\n            }\n            // Check if user is authenticated\n            if (!isGoogleAuthenticated()) {\n                throw new Error(\"User not authenticated with Google\");\n            }\n            console.log(\"Listing Google Drive files with query:\", query || \"No query\");\n            window.gapi.client.drive.files.list({\n                q: query,\n                fields: \"files(id, name, mimeType, iconLink, modifiedTime, webViewLink)\",\n                orderBy: \"modifiedTime desc\",\n                pageSize: 50\n            }).then((response)=>{\n                console.log(\"Google Drive files retrieved:\", response.result.files.length);\n                resolve(response.result.files);\n            }).catch((error)=>{\n                console.error(\"Error listing Google Drive files:\", error);\n                reject(error);\n            });\n        } catch (error) {\n            console.error(\"Error in listDriveFiles:\", error);\n            reject(error);\n        }\n    });\n};\n// Get a specific file from Google Drive\nconst getDriveFile = async (fileId)=>{\n    // Check if we're in a browser environment\n    if (!isBrowser) {\n        throw new Error(\"Google Drive API requires a browser environment\");\n    }\n    if (!window.gapi || !window.gapi.client || !window.gapi.client.drive) {\n        throw new Error(\"Google Drive API not loaded\");\n    }\n    try {\n        const response = await window.gapi.client.drive.files.get({\n            fileId: fileId,\n            fields: \"id, name, mimeType, iconLink, modifiedTime, webViewLink, webContentLink\"\n        });\n        return response.result;\n    } catch (error) {\n        console.error(\"Error getting Drive file:\", error);\n        throw new Error(\"Failed to get Drive file: \".concat(error.message || \"Unknown error\"));\n    }\n};\n// Download a file from Google Drive\nconst downloadDriveFile = async (fileId)=>{\n    // Check if we're in a browser environment\n    if (!isBrowser) {\n        throw new Error(\"Google Drive API requires a browser environment\");\n    }\n    if (!window.gapi || !window.gapi.client || !window.gapi.client.drive) {\n        throw new Error(\"Google Drive API not loaded\");\n    }\n    try {\n        const response = await window.gapi.client.drive.files.get({\n            fileId: fileId,\n            alt: \"media\"\n        });\n        return response.body;\n    } catch (error) {\n        console.error(\"Error downloading Drive file:\", error);\n        throw new Error(\"Failed to download Drive file: \".concat(error.message || \"Unknown error\"));\n    }\n};\n// Check if Google Drive API is properly configured\nconst checkGoogleDriveConfig = async ()=>{\n    var _window_gapi, _window_gapi1, _window_gapi_client, _window_gapi2;\n    const apiKey = \"AIzaSyB-pZ0FV758VUs_pIZ0Ck2iq5Wx0FDJCxw\";\n    const clientId = \"913358736520-5biusol4f5ead6t86d7rv94rd0ar3gkn.apps.googleusercontent.com\";\n    const errors = [];\n    if (!apiKey) errors.push(\"API Key is missing\");\n    if (!clientId) errors.push(\"Client ID is missing\");\n    const config = {\n        apiKey: apiKey ? true : false,\n        clientId: clientId ? true : false,\n        isConfigured: !!(apiKey && clientId),\n        errors: errors,\n        apiStatus: {\n            gapiLoaded: isBrowser && !!window.gapi,\n            clientLoaded: isBrowser && !!((_window_gapi = window.gapi) === null || _window_gapi === void 0 ? void 0 : _window_gapi.client),\n            authLoaded: isBrowser && !!((_window_gapi1 = window.gapi) === null || _window_gapi1 === void 0 ? void 0 : _window_gapi1.auth2),\n            driveLoaded: isBrowser && !!((_window_gapi2 = window.gapi) === null || _window_gapi2 === void 0 ? void 0 : (_window_gapi_client = _window_gapi2.client) === null || _window_gapi_client === void 0 ? void 0 : _window_gapi_client.drive)\n        }\n    };\n    console.log(\"Google Drive API configuration:\", config);\n    return config;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/googleDrive.ts\n"));

/***/ })

});