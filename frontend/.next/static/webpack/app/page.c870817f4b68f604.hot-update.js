"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/googleDrive.ts":
/*!****************************!*\
  !*** ./lib/googleDrive.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConflictDetectionService: function() { return /* binding */ ConflictDetectionService; },\n/* harmony export */   GoogleDriveService: function() { return /* binding */ GoogleDriveService; },\n/* harmony export */   conflictDetectionService: function() { return /* binding */ conflictDetectionService; },\n/* harmony export */   googleDriveService: function() { return /* binding */ googleDriveService; }\n/* harmony export */ });\n/**\n * Google Drive API Integration Service\n * \n * This service handles the integration with Google Drive API for document management\n * and real-time collaboration.\n * \n * Google Cloud Project Setup Instructions:\n * 1. Create a new project in Google Cloud Console (https://console.cloud.google.com/)\n * 2. Enable the Google Drive API\n * 3. Configure OAuth consent screen\n *    - User Type: External\n *    - Application name: MUN Connect\n *    - Authorized domains: your-domain.com\n *    - Developer contact information: your-email@example.com\n * 4. Create OAuth 2.0 credentials\n *    - Application type: Web application\n *    - Name: MUN Connect Web Client\n *    - Authorized JavaScript origins: http://localhost:3000, https://your-domain.com\n *    - Authorized redirect URIs: http://localhost:3000/api/auth/callback/google, https://your-domain.com/api/auth/callback/google\n * 5. Add the following environment variables to your .env.local file:\n *    - GOOGLE_CLIENT_ID=your-client-id\n *    - GOOGLE_CLIENT_SECRET=your-client-secret\n *    - GOOGLE_API_KEY=your-api-key (for public API access)\n */ // Default configuration - these values should be replaced with environment variables\nconst DEFAULT_CONFIG = {\n    clientId: \"913358736520-5biusol4f5ead6t86d7rv94rd0ar3gkn.apps.googleusercontent.com\" || 0,\n    apiKey: \"AIzaSyB-pZ0FV758VUs_pIZ0Ck2iq5Wx0FDJCxw\" || 0,\n    scopes: [\n        \"https://www.googleapis.com/auth/drive.file\",\n        \"https://www.googleapis.com/auth/drive.appdata\"\n    ]\n};\n// Google Drive API Service\nclass GoogleDriveService {\n    /**\n   * Initialize the Google Drive API\n   * This loads the required libraries and initializes the API client\n   */ async initialize() {\n        if (this.initializationPromise) {\n            return this.initializationPromise;\n        }\n        this.initializationPromise = new Promise((resolve, reject)=>{\n            try {\n                // Load the Google API client library\n                const script1 = document.createElement(\"script\");\n                script1.src = \"https://apis.google.com/js/api.js\";\n                script1.async = true;\n                script1.defer = true;\n                script1.onload = ()=>{\n                    this.gapiLoaded = true;\n                    this.loadGapiClient().then(()=>{\n                        if (this.gisLoaded) resolve();\n                    }).catch(reject);\n                };\n                script1.onerror = (error)=>{\n                    console.error(\"Failed to load Google API client:\", error);\n                    reject(new Error(\"Failed to load Google API client\"));\n                };\n                document.body.appendChild(script1);\n                // Load the Google Identity Services library\n                const script2 = document.createElement(\"script\");\n                script2.src = \"https://accounts.google.com/gsi/client\";\n                script2.async = true;\n                script2.defer = true;\n                script2.onload = ()=>{\n                    this.gisLoaded = true;\n                    this.initializeTokenClient();\n                    if (this.gapiLoaded) resolve();\n                };\n                script2.onerror = (error)=>{\n                    console.error(\"Failed to load Google Identity Services:\", error);\n                    reject(new Error(\"Failed to load Google Identity Services\"));\n                };\n                document.body.appendChild(script2);\n            } catch (error) {\n                console.error(\"Error initializing Google Drive API:\", error);\n                reject(new Error(\"Error initializing Google Drive API: \".concat(error)));\n            }\n        });\n        return this.initializationPromise;\n    }\n    /**\n   * Load the Google API client library\n   */ async loadGapiClient() {\n        return new Promise((resolve, reject)=>{\n            try {\n                window.gapi.load(\"client\", {\n                    callback: async ()=>{\n                        try {\n                            await window.gapi.client.init({\n                                apiKey: this.config.apiKey,\n                                discoveryDocs: [\n                                    \"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"\n                                ]\n                            });\n                            resolve();\n                        } catch (error) {\n                            reject(\"Error initializing GAPI client: \".concat(error));\n                        }\n                    },\n                    onerror: (error)=>reject(\"Error loading GAPI client: \".concat(error))\n                });\n            } catch (error) {\n                reject(\"Failed to load GAPI client: \".concat(error));\n            }\n        });\n    }\n    /**\n   * Initialize the Google Identity Services token client\n   */ initializeTokenClient() {\n        this.tokenClient = window.google.accounts.oauth2.initTokenClient({\n            client_id: this.config.clientId,\n            scope: this.config.scopes.join(\" \"),\n            callback: (tokenResponse)=>{\n                if (tokenResponse.error) {\n                    console.error(\"Error getting access token: \".concat(tokenResponse.error));\n                    return;\n                }\n                this.accessToken = tokenResponse.access_token;\n                window.gapi.client.setToken(tokenResponse);\n            }\n        });\n    }\n    /**\n   * Authenticate the user and request access to Google Drive\n   */ async authenticate() {\n        if (!this.initializationPromise) {\n            await this.initialize();\n        }\n        return new Promise((resolve)=>{\n            if (!this.tokenClient) {\n                console.error(\"Token client not initialized. Attempting to reinitialize...\");\n                this.initializeTokenClient();\n                if (!this.tokenClient) {\n                    throw new Error(\"Failed to initialize token client\");\n                }\n            }\n            try {\n                this.tokenClient.callback = (resp)=>{\n                    if (resp.error) {\n                        console.error(\"Error during authentication:\", resp.error);\n                        resolve(false);\n                        return;\n                    }\n                    this.accessToken = resp.access_token;\n                    window.gapi.client.setToken({\n                        access_token: this.accessToken\n                    });\n                    resolve(true);\n                };\n                if (!window.gapi.client.getToken()) {\n                    // Request an access token\n                    this.tokenClient.requestAccessToken({\n                        prompt: \"consent\"\n                    });\n                } else {\n                    // Already have an access token\n                    this.accessToken = window.gapi.client.getToken().access_token;\n                    resolve(true);\n                }\n            } catch (error) {\n                console.error(\"Error authenticating:\", error);\n                resolve(false);\n            }\n        });\n    }\n    /**\n   * Check if the user is authenticated\n   */ isAuthenticated() {\n        return this.accessToken !== null;\n    }\n    /**\n   * Create a new Google Doc for a document\n   * @param document The document to create a Google Doc for\n   * @returns The ID of the created Google Doc\n   */ async createGoogleDoc(document1) {\n        if (!this.isAuthenticated()) {\n            throw new Error(\"Not authenticated with Google Drive\");\n        }\n        try {\n            const response = await window.gapi.client.drive.files.create({\n                resource: {\n                    name: document1.title,\n                    mimeType: \"application/vnd.google-apps.document\",\n                    description: \"MUN Connect document: \".concat(document1.type, \" for \").concat(document1.committee, \" - \").concat(document1.country),\n                    properties: {\n                        munConnectDocId: document1.id,\n                        documentType: document1.type,\n                        committee: document1.committee,\n                        country: document1.country\n                    }\n                },\n                fields: \"id,webViewLink\"\n            });\n            return response.result.id;\n        } catch (error) {\n            console.error(\"Error creating Google Doc: \".concat(error));\n            throw new Error(\"Failed to create Google Doc: \".concat(error));\n        }\n    }\n    /**\n   * Get a Google Doc by its ID\n   * @param googleDocId The ID of the Google Doc to get\n   * @returns The Google Doc metadata\n   */ async getGoogleDoc(googleDocId) {\n        if (!this.isAuthenticated()) {\n            throw new Error(\"Not authenticated with Google Drive\");\n        }\n        try {\n            const response = await window.gapi.client.drive.files.get({\n                fileId: googleDocId,\n                fields: \"id,name,webViewLink,modifiedTime,capabilities\"\n            });\n            return response.result;\n        } catch (error) {\n            console.error(\"Error getting Google Doc: \".concat(error));\n            throw new Error(\"Failed to get Google Doc: \".concat(error));\n        }\n    }\n    /**\n   * Update a Google Doc's content\n   * @param googleDocId The ID of the Google Doc to update\n   * @param content The new content of the Google Doc\n   */ async updateGoogleDoc(googleDocId, content) {\n        if (!this.isAuthenticated()) {\n            throw new Error(\"Not authenticated with Google Drive\");\n        }\n        try {\n            // This is a simplified version. In a real implementation,\n            // you would use the Google Docs API to update the document content.\n            // For simplicity, we're just updating the document's metadata here.\n            await window.gapi.client.drive.files.update({\n                fileId: googleDocId,\n                resource: {\n                    properties: {\n                        lastUpdated: new Date().toISOString()\n                    }\n                }\n            });\n        } catch (error) {\n            console.error(\"Error updating Google Doc: \".concat(error));\n            throw new Error(\"Failed to update Google Doc: \".concat(error));\n        }\n    }\n    /**\n   * Export a Google Doc to a specific format (PDF, DOCX)\n   * @param googleDocId The ID of the Google Doc to export\n   * @param mimeType The mime type to export to (e.g., 'application/pdf')\n   * @returns A URL to download the exported file\n   */ async exportGoogleDoc(googleDocId, mimeType) {\n        if (!this.isAuthenticated()) {\n            throw new Error(\"Not authenticated with Google Drive\");\n        }\n        try {\n            const response = await fetch(\"https://www.googleapis.com/drive/v3/files/\".concat(googleDocId, \"/export?mimeType=\").concat(encodeURIComponent(mimeType)), {\n                headers: {\n                    Authorization: \"Bearer \".concat(this.accessToken)\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to export Google Doc: \".concat(response.statusText));\n            }\n            const blob = await response.blob();\n            return URL.createObjectURL(blob);\n        } catch (error) {\n            console.error(\"Error exporting Google Doc: \".concat(error));\n            throw new Error(\"Failed to export Google Doc: \".concat(error));\n        }\n    }\n    /**\n   * Watch for changes to a Google Doc\n   * This is a placeholder for real-time sync functionality.\n   * In a production environment, you would use the Google Drive API's\n   * watch method or establish a WebSocket connection.\n   * \n   * @param googleDocId The ID of the Google Doc to watch\n   * @param callback The callback to call when the Google Doc changes\n   * @returns A function to stop watching for changes\n   */ watchGoogleDoc(googleDocId, callback) {\n        // This is a placeholder. In a real implementation, you would use the Google Drive API's\n        // changes.watch method or establish a WebSocket connection.\n        const checkInterval = 5000; // Check every 5 seconds\n        let lastModified = null;\n        const intervalId = setInterval(async ()=>{\n            try {\n                if (!this.isAuthenticated()) {\n                    console.warn(\"Not authenticated with Google Drive\");\n                    return;\n                }\n                const doc = await this.getGoogleDoc(googleDocId);\n                if (lastModified !== null && doc.modifiedTime !== lastModified) {\n                    // Document has changed\n                    callback({\n                        documentId: googleDocId,\n                        modifiedTime: doc.modifiedTime\n                    });\n                }\n                lastModified = doc.modifiedTime;\n            } catch (error) {\n                console.error(\"Error checking for Google Doc changes: \".concat(error));\n            }\n        }, checkInterval);\n        // Return a function to stop watching for changes\n        return ()=>clearInterval(intervalId);\n    }\n    /**\n   * Import a file from Google Drive\n   * @param fileId The ID of the file to import\n   * @returns The imported file data\n   */ async importFile(fileId) {\n        if (!this.isAuthenticated()) {\n            throw new Error(\"Not authenticated with Google Drive\");\n        }\n        try {\n            // Get file metadata\n            const metadataResponse = await window.gapi.client.drive.files.get({\n                fileId,\n                fields: \"name,mimeType\"\n            });\n            const { name, mimeType } = metadataResponse.result;\n            // Get file content\n            const contentResponse = await fetch(\"https://www.googleapis.com/drive/v3/files/\".concat(fileId, \"?alt=media\"), {\n                headers: {\n                    Authorization: \"Bearer \".concat(this.accessToken)\n                }\n            });\n            if (!contentResponse.ok) {\n                throw new Error(\"Failed to get file content: \".concat(contentResponse.statusText));\n            }\n            let content = \"\";\n            if (mimeType === \"application/vnd.google-apps.document\") {\n                // Export Google Doc to text\n                const exportUrl = await this.exportGoogleDoc(fileId, \"text/plain\");\n                const exportResponse = await fetch(exportUrl);\n                content = await exportResponse.text();\n            } else {\n                // Get raw content for other file types\n                content = await contentResponse.text();\n            }\n            return {\n                name,\n                content,\n                mimeType\n            };\n        } catch (error) {\n            console.error(\"Error importing file: \".concat(error));\n            throw new Error(\"Failed to import file: \".concat(error));\n        }\n    }\n    /**\n   * List files from Google Drive\n   * @param query Optional search query to filter files\n   * @returns Array of Google Drive files\n   */ async listDriveFiles() {\n        let query = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n        if (!this.isAuthenticated()) {\n            throw new Error(\"Not authenticated with Google Drive\");\n        }\n        try {\n            // Use the Google Drive API to list files\n            const response = await window.gapi.client.drive.files.list({\n                pageSize: 50,\n                fields: \"files(id, name, mimeType, modifiedTime, webViewLink)\",\n                q: query ? query : \"trashed = false\",\n                orderBy: \"modifiedTime desc\"\n            });\n            console.log(\"Google Drive files:\", response.result.files);\n            return response.result.files || [];\n        } catch (error) {\n            console.error(\"Error listing Drive files:\", error);\n            throw error;\n        }\n    }\n    constructor(config = {}){\n        this.gapiLoaded = false;\n        this.gisLoaded = false;\n        this.tokenClient = null;\n        this.accessToken = null;\n        this.initializationPromise = null;\n        this.config = {\n            ...DEFAULT_CONFIG,\n            ...config\n        };\n        if (!this.config.clientId) {\n            throw new Error(\"Google Client ID is required but not provided\");\n        }\n        if (!this.config.apiKey) {\n            throw new Error(\"Google API Key is required but not provided\");\n        }\n    }\n}\n/**\n * AI Conflict Detection Service\n * \n * This service implements a basic AI conflict detection algorithm\n * to flag conflicts between documents or content sections.\n * \n * In a production environment, this would integrate with an\n * actual NLP or AI service.\n */ class ConflictDetectionService {\n    /**\n   * Detect conflicts between document content sections\n   * @param contentA First content section\n   * @param contentB Second content section\n   * @returns Array of detected conflicts\n   */ detectConflicts(contentA, contentB) {\n        const conflicts = [];\n        // This is a very basic implementation for demonstration purposes\n        // Check for duplicate content (exact matches)\n        const paragraphsA = contentA.split(\"\\n\\n\");\n        const paragraphsB = contentB.split(\"\\n\\n\");\n        // Compare paragraphs for exact matches (simulating duplicate content detection)\n        for (const paraA of paragraphsA){\n            if (paraA.length > 50 && paragraphsB.includes(paraA)) {\n                conflicts.push({\n                    type: \"duplicate_content\",\n                    description: \"Duplicate paragraph detected\",\n                    sections: [\n                        paraA\n                    ]\n                });\n            }\n        }\n        // Simulating conflicting perspective detection\n        // In a real implementation, this would use NLP to detect contradictory statements\n        const keywordsA = this.extractKeywords(contentA);\n        const keywordsB = this.extractKeywords(contentB);\n        // Check for opposite sentiment keywords (very simplified approach)\n        const oppositeKeywords = [\n            [\n                \"support\",\n                \"oppose\"\n            ],\n            [\n                \"agree\",\n                \"disagree\"\n            ],\n            [\n                \"approve\",\n                \"disapprove\"\n            ],\n            [\n                \"increase\",\n                \"decrease\"\n            ],\n            [\n                \"positive\",\n                \"negative\"\n            ]\n        ];\n        for (const [positive, negative] of oppositeKeywords){\n            if (keywordsA.includes(positive) && keywordsB.includes(negative) || keywordsA.includes(negative) && keywordsB.includes(positive)) {\n                conflicts.push({\n                    type: \"conflicting_perspective\",\n                    description: 'Potentially conflicting positions: \"'.concat(positive, '\" vs \"').concat(negative, '\"'),\n                    sections: this.findSentencesWithKeywords([\n                        contentA,\n                        contentB\n                    ], [\n                        positive,\n                        negative\n                    ])\n                });\n            }\n        }\n        return conflicts;\n    }\n    /**\n   * Extract keywords from text (simplified implementation)\n   * @param text The text to extract keywords from\n   * @returns Array of extracted keywords\n   */ extractKeywords(text) {\n        // This is a simplified implementation.\n        // In a real app, you would use a proper NLP library for keyword extraction.\n        const words = text.toLowerCase().split(/\\W+/);\n        return Array.from(new Set(words.filter((word)=>word.length > 3)));\n    }\n    /**\n   * Find sentences containing specific keywords\n   * @param texts Array of text blocks to search in\n   * @param keywords Keywords to search for\n   * @returns Array of sentences containing the keywords\n   */ findSentencesWithKeywords(texts, keywords) {\n        const sentences = [];\n        // Split texts into sentences and find those containing keywords\n        for (const text of texts){\n            const textSentences = text.split(/[.!?]+/).filter((s)=>s.trim().length > 0);\n            for (const sentence of textSentences){\n                for (const keyword of keywords){\n                    if (sentence.toLowerCase().includes(keyword.toLowerCase())) {\n                        sentences.push(sentence.trim());\n                        break;\n                    }\n                }\n            }\n        }\n        return sentences;\n    }\n}\n// Create singleton instances for use throughout the application\nconst googleDriveService = new GoogleDriveService();\nconst conflictDetectionService = new ConflictDetectionService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/googleDrive.ts\n"));

/***/ })

});