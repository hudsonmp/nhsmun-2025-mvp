"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/auth/page",{

/***/ "(app-pages-browser)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   documentAPI: function() { return /* binding */ documentAPI; },\n/* harmony export */   getCurrentUser: function() { return /* binding */ getCurrentUser; },\n/* harmony export */   isAuthenticated: function() { return /* binding */ isAuthenticated; },\n/* harmony export */   supabase: function() { return /* binding */ supabase; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://gaeozzajiedqfupwglnl.supabase.co\" || 0;\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdhZW96emFqaWVkcWZ1cHdnbG5sIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA3OTQ1NzcsImV4cCI6MjA1NjM3MDU3N30.XCF3mdds0xHEUndo0IrSUzgQ4Px0yW28DDmTtUeMDjI\" || 0;\n// Create a single supabase client for interacting with your database\n// Enable persistent sessions in localStorage by default\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        persistSession: true,\n        storageKey: \"nhsmun-auth-storage-key\",\n        autoRefreshToken: true,\n        detectSessionInUrl: true\n    }\n});\n// Function to check if the user is authenticated\nconst isAuthenticated = async ()=>{\n    const { data } = await supabase.auth.getSession();\n    return !!data.session;\n};\n// Function to get the current user\nconst getCurrentUser = async ()=>{\n    const { data } = await supabase.auth.getUser();\n    return (data === null || data === void 0 ? void 0 : data.user) || null;\n};\n/*\n * Document Storage Functions\n * \n * Supabase Schema Setup Instructions:\n * 1. Create 'documents' table with fields:\n *    - id: uuid (primary key, default: uuid_generate_v4())\n *    - title: text (not null)\n *    - type: text (not null)\n *    - committee: text (not null)\n *    - country: text (not null)\n *    - topic: text (not null)\n *    - content: text\n *    - created_at: timestamp with time zone (default: now())\n *    - updated_at: timestamp with time zone\n *    - user_id: uuid (foreign key to auth.users)\n *    - format_status: text (default: 'not_checked')\n *    - file_path: text\n *    - file_type: text\n *    - file_size: integer\n *    - google_doc_id: text\n *    - sync_status: text (default: 'pending')\n *    - last_synced: timestamp with time zone\n * \n * 2. Create 'document_conflicts' table with fields:\n *    - id: uuid (primary key, default: uuid_generate_v4())\n *    - document_id: uuid (foreign key to documents.id)\n *    - conflict_type: text (not null)\n *    - description: text (not null)\n *    - sections: text[] (array)\n *    - created_at: timestamp with time zone (default: now())\n *    - resolved: boolean (default: false)\n *\n * 3. Set up storage bucket 'documents' with security rules\n *    that allow authenticated users to upload/download\n */ // Document storage functions\nconst documentAPI = {\n    // Get all documents for the current user\n    getDocuments: async ()=>{\n        try {\n            const { data: documents, error: docError } = await supabase.from(\"documents\").select(\"\\n          id,\\n          title,\\n          type,\\n          committee,\\n          country,\\n          topic,\\n          content,\\n          created_at,\\n          updated_at,\\n          user_id,\\n          format_status,\\n          format_issues,\\n          storage_path,\\n          drive_file_id,\\n          drive_web_link,\\n          drive_metadata,\\n          sync_status,\\n          last_synced,\\n          is_public\\n        \");\n            if (docError) {\n                console.error(\"Error fetching documents:\", docError);\n                throw new Error(\"Failed to fetch documents: \".concat(docError.message));\n            }\n            if (!documents || documents.length === 0) {\n                return [];\n            }\n            // Fetch user data separately and combine\n            const userIdSet = new Set(documents.map((doc)=>doc.user_id));\n            const userIds = Array.from(userIdSet);\n            const { data: users, error: userError } = await supabase.from(\"users\").select(\"id, email, username, name\").in(\"id\", userIds);\n            if (userError) {\n                console.error(\"Error fetching users:\", userError);\n            // Don't throw here, just use placeholder user data\n            }\n            // Map users to documents\n            return documents.map((doc)=>{\n                const user = (users === null || users === void 0 ? void 0 : users.find((u)=>u.id === doc.user_id)) || {\n                    id: doc.user_id,\n                    email: \"unknown@example.com\",\n                    username: \"unknown\",\n                    name: \"Unknown User\"\n                };\n                return {\n                    ...doc,\n                    user\n                };\n            });\n        } catch (error) {\n            console.error(\"Error in getDocuments:\", error);\n            throw new Error(\"Failed to fetch documents: \".concat(error.message));\n        }\n    },\n    // Get a single document by ID\n    getDocument: async (documentId)=>{\n        const { data, error } = await supabase.from(\"documents\").select(\"\\n        id,\\n        title,\\n        type,\\n        committee,\\n        country,\\n        topic,\\n        content,\\n        created_at,\\n        updated_at,\\n        user_id,\\n        format_status,\\n        storage_path,\\n        drive_file_id,\\n        is_public\\n      \").eq(\"id\", documentId).single();\n        if (error) throw error;\n        if (!data) return null;\n        // Fetch user data\n        const { data: userData, error: userError } = await supabase.from(\"users\").select(\"id, email, username, name\").eq(\"id\", data.user_id).single();\n        if (userError) {\n            // If user not found, create placeholder user\n            const user = {\n                id: data.user_id,\n                email: \"\",\n                username: \"\",\n                name: \"\"\n            };\n            return {\n                ...data,\n                user\n            };\n        }\n        return {\n            ...data,\n            user: userData\n        };\n    },\n    // Create a new document with metadata\n    createDocument: async (metadata)=>{\n        try {\n            var _user_email, _user_user_metadata, _user_email1, _user_user_metadata1;\n            const user = await getCurrentUser();\n            if (!user) {\n                throw new Error(\"User not authenticated\");\n            }\n            // First, ensure user exists in the users table\n            const { error: userError } = await supabase.from(\"users\").upsert({\n                id: user.id,\n                email: user.email || \"unknown@example.com\",\n                username: ((_user_email = user.email) === null || _user_email === void 0 ? void 0 : _user_email.split(\"@\")[0]) || \"unknown\",\n                name: ((_user_user_metadata = user.user_metadata) === null || _user_user_metadata === void 0 ? void 0 : _user_user_metadata.name) || \"Unknown User\"\n            }, {\n                onConflict: \"id\"\n            });\n            if (userError) {\n                console.error(\"Error upserting user:\", userError);\n                throw new Error(\"Failed to create/update user: \".concat(userError.message));\n            }\n            // Then create the document\n            const { data: doc, error: docError } = await supabase.from(\"documents\").insert({\n                title: metadata.title,\n                type: metadata.type,\n                committee: metadata.committee,\n                country: metadata.country,\n                topic: metadata.topic,\n                user_id: user.id,\n                format_status: \"pending\",\n                file_type: metadata.file_type || \"gdoc\",\n                sync_status: \"pending\",\n                last_synced: new Date().toISOString()\n            }).select().single();\n            if (docError) {\n                console.error(\"Error creating document:\", docError);\n                throw new Error(\"Failed to create document: \".concat(docError.message));\n            }\n            if (!doc) {\n                throw new Error(\"Document created but no data returned\");\n            }\n            return {\n                ...doc,\n                user: {\n                    id: user.id,\n                    email: user.email || \"unknown@example.com\",\n                    username: ((_user_email1 = user.email) === null || _user_email1 === void 0 ? void 0 : _user_email1.split(\"@\")[0]) || \"unknown\",\n                    name: ((_user_user_metadata1 = user.user_metadata) === null || _user_user_metadata1 === void 0 ? void 0 : _user_user_metadata1.name) || \"Unknown User\"\n                }\n            };\n        } catch (error) {\n            console.error(\"Error in createDocument:\", error);\n            throw new Error(\"Failed to create document: \".concat(error.message));\n        }\n    },\n    // Generate a signed URL for file upload\n    getUploadUrl: async (documentId, fileName, fileType)=>{\n        const filePath = \"\".concat(documentId, \"/\").concat(fileName);\n        const { data, error } = await supabase.storage.from(\"documents\").createSignedUploadUrl(filePath);\n        if (error) throw error;\n        // Update the document with the file path\n        await supabase.from(\"documents\").update({\n            storage_path: filePath\n        }).eq(\"id\", documentId);\n        return data.signedUrl;\n    },\n    // Update document metadata\n    updateDocument: async (documentId, metadata)=>{\n        try {\n            const { data: doc, error: docError } = await supabase.from(\"documents\").update({\n                ...metadata,\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", documentId).select().single();\n            if (docError) {\n                console.error(\"Error updating document:\", docError);\n                throw new Error(\"Failed to update document: \".concat(docError.message));\n            }\n            if (!doc) {\n                throw new Error(\"Document updated but no data returned\");\n            }\n            // Get user data\n            const { data: userData, error: userError } = await supabase.from(\"users\").select(\"id, email, username, name\").eq(\"id\", doc.user_id).single();\n            if (userError) {\n                console.error(\"Error fetching user data:\", userError);\n            }\n            return {\n                ...doc,\n                user: userData || {\n                    id: doc.user_id,\n                    email: \"unknown@example.com\",\n                    username: \"unknown\",\n                    name: \"Unknown User\"\n                }\n            };\n        } catch (error) {\n            console.error(\"Error in updateDocument:\", error);\n            throw new Error(\"Failed to update document: \".concat(error.message));\n        }\n    },\n    // Get document sync status\n    getSyncStatus: async (documentId)=>{\n        const { data, error } = await supabase.from(\"documents\").select(\"\\n        id,\\n        drive_file_id,\\n        sync_status,\\n        format_status,\\n        last_synced\\n      \").eq(\"id\", documentId).single();\n        if (error) throw error;\n        if (!data) return null;\n        return {\n            document_id: data.id,\n            drive_file_id: data.drive_file_id,\n            sync_status: data.sync_status,\n            format_status: data.format_status,\n            last_synced: data.last_synced\n        };\n    },\n    // Get document conflicts\n    getConflicts: async (documentId)=>{\n        const { data, error } = await supabase.from(\"document_conflicts\").select(\"*\").eq(\"document_id\", documentId).order(\"created_at\", {\n            ascending: false\n        });\n        if (error) throw error;\n        return data || [];\n    },\n    // Resolve a conflict\n    resolveConflict: async (conflictId)=>{\n        const { error } = await supabase.from(\"document_conflicts\").update({\n            resolved: true\n        }).eq(\"id\", conflictId);\n        if (error) throw error;\n    },\n    // Subscribe to document changes\n    subscribeToDocument: (documentId, callback)=>{\n        return supabase.channel(\"document-\".concat(documentId)).on(\"postgres_changes\", {\n            event: \"*\",\n            schema: \"public\",\n            table: \"documents\",\n            filter: \"id=eq.\".concat(documentId)\n        }, callback).subscribe();\n    },\n    // Subscribe to document conflicts\n    subscribeToConflicts: (documentId, callback)=>{\n        return supabase.channel(\"conflicts-\".concat(documentId)).on(\"postgres_changes\", {\n            event: \"*\",\n            schema: \"public\",\n            table: \"document_conflicts\",\n            filter: \"document_id=eq.\".concat(documentId)\n        }, callback).subscribe();\n    },\n    // Validate document format\n    validateDocumentFormat: async (documentId)=>{\n        // In a real implementation, this would call a backend API to validate the document\n        // For testing, we'll simulate a validation process\n        // First update status to 'pending'\n        await supabase.from(\"documents\").update({\n            format_status: \"pending\"\n        }).eq(\"id\", documentId);\n        // Simulate a validation delay\n        await new Promise((resolve)=>setTimeout(resolve, 1500));\n        // Randomly decide if the document is valid or has issues (for testing)\n        const validationResult = Math.random() > 0.5 ? \"valid\" : \"issues\";\n        // Prepare potential issues if status is 'issues'\n        const formatIssues = validationResult === \"issues\" ? [\n            \"Incorrect heading format\",\n            \"Missing country flag in header\",\n            \"Inconsistent citation style\"\n        ].filter(()=>Math.random() > 0.5) // Randomly select some issues\n         : [];\n        // Update the document with validation results\n        await supabase.from(\"documents\").update({\n            format_status: validationResult,\n            format_issues: formatIssues.length > 0 ? formatIssues : null\n        }).eq(\"id\", documentId);\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (supabase);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/supabase.ts\n"));

/***/ })

});